#include<bits/stdc++.h>
using namespace std;

int n,m,rooms=0;
char c;
vector<vector<int>> visited;
vector<pair<int,int>> moves={{1,0},{-1,0},{0,1},{0,-1}};

bool is_valid(int x,int y){

    if(x<0 or x>=n or y<0 or y>=m){
        return false;
    }
    if(visited[x][y]){
        return false;
    }
    return true;
}

//do this for all grapgh related problems.
void dfs(int i,int j){
    visited[i][j]=true;
    for(auto p: moves){
        if(is_valid (i+p.first,j+p.second)){
            dfs(i+p.first,j+p.second);
        }
    }
}

void connected_components(){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!visited[i][j]){
                dfs(i,j);
                ++rooms;
            }
        }
    }
}

int main(){
    
    cin>>n>>m;
    visited.resize(n, vector<int>(m));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>c;
            if(c=='#'){
                
                visited[i][j]=true;
            }
            else{
                visited[i][j]=false;
            }
        }
    }
    connected_components();
    cout<<rooms;
    return 0;
    
}
