#include<bits/stdc++.h>
using namespace std;

int n,m;
vector<vector<int>> adj_list;
vector<int> parent;
vector<int> dist;
vector<bool> visited;

void bfs(int i){
    visited[i-1]=true;
    queue<int> q;
    q.push(i);
    parent[i-1]=0;
    dist[i-1]=0;
    while(!q.empty()){
        int c=q.front();
        q.pop();
        for(auto u:adj_list[c-1]){
            if(!visited[u-1]){
                q.push(u);
                visited[u-1]=true;
                parent[u-1]=c;
                dist[u-1]=dist[c-1]+1;
            }
        }
    }
}

int main(){

    cin>>n>>m;
    dist.resize(n,0);
    parent.resize(n,0);
    visited.resize(n,false);
    adj_list.resize(n);
    
    int a,b;
    for(int i=0;i<m;i++){
        cin>>a>>b;
        adj_list[a-1].push_back(b);
        adj_list[b-1].push_back(a);
    }

    bfs(1);
    int u=n;
    if(dist[u-1]==0){
        cout<<"IMPOSSIBLE";
        return 0;
    }
    vector<int> output;
    output.push_back(n);
    int count=0;
    while(u!=0){
        output.push_back(parent[u-1]);
        u=parent[u-1];
        count++;
    }
    cout<<count<<endl;
    for(int i=output.size()-1;i>=0;i--){
        if(output[i]){
            cout<<output[i]<<" ";
        }
    }

    return 0;
}

