#include<bits/stdc++.h>
using namespace std;

int n,m;
vector<vector<int>> adj_list;
vector<int> visited;
vector<int> dist;
vector<int> parent;

void bfs(int i){
    visited[i-1]=true;
    queue<int> q;
    q.push(i);
    dist[i-1]=0;
    parent[i-1]=0;
    while(!q.empty()){
        int s=q.front();
        q.pop();
        for(auto u:adj_list[s-1]){
            if(!visited[u-1]){
                visited[u-1]=true;
                dist[u-1]=dist[s-1]+1;
                parent[u-1]=s;
                q.push(u);
            }
        }
    }
}

int main(){
    cin>>n>>m;
    int a,b;
    adj_list.resize(n);
    visited.resize(n,false);
    dist.resize(n,0);
    for(int i=0;i<m;i++){
        cin>>a>>b;
        adj_list[a-1].push_back(b);
        adj_list[b-1].push_back(a);
    }
    bfs(1);
    vector<int> ans;
    int i=n;
    if(!visited[n]){
        printf("IMPOSSIBLE\n");
        return 0;
    }
    while(i>0){
        ans.push_back(i);
        i=parent[i-1];
    }
    cout<<dist[n-1]<<endl;
    for(int i=ans.size()-1;i>=0;i--){
        cout<<ans[i]<<" ";
    }

}

//the above idea is correct but there is a small logical error , yet to be connected
